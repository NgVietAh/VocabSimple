import 'dart:convert';
import 'package:flutter/services.dart';
import 'local_database_service.dart';

class DataLoader {
  /// ƒê·ªçc file JSON v√† l∆∞u d·ªØ li·ªáu v√†o SQLite (ch·ªâ load 1 l·∫ßn)
  static Future<void> loadVocabularyFromJson() async {
    // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
    final existingTopics = await LocalDatabaseService.getTopics();
    if (existingTopics.isNotEmpty) {
      // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu tr√πng l·∫∑p kh√¥ng
      final uniqueTopics = <String>{};
      bool hasDuplicates = false;
      
      for (var topic in existingTopics) {
        final topicName = topic['topic'] as String;
        if (uniqueTopics.contains(topicName)) {
          hasDuplicates = true;
          break;
        }
        uniqueTopics.add(topicName);
      }
      
      if (hasDuplicates) {
        print('‚ö†Ô∏è Ph√°t hi·ªán ch·ªß ƒë·ªÅ tr√πng l·∫∑p, ƒëang x√≥a v√† load l·∫°i...');
        await LocalDatabaseService.clearAll();
      } else {
        print('‚úì Database ƒë√£ c√≥ ${existingTopics.length} ch·ªß ƒë·ªÅ, b·ªè qua vi·ªác load JSON');
        return;
      }
    }

    print('üîÑ ƒêang load d·ªØ li·ªáu t·ª´ vocabulary.json v√†o database...');

    final jsonString = await rootBundle.loadString('assets/data/vocabulary.json');
    final Map<String, dynamic> data = json.decode(jsonString);

    int topicCount = 0;
    int wordCount = 0;

    for (var entry in data.entries) {
      final topicKey = entry.key;
      final topicData = entry.value as Map<String, dynamic>;

      // L∆∞u ch·ªß ƒë·ªÅ
      await LocalDatabaseService.insertTopic({
        'topic': topicKey,
        'topic_index': topicData['topic_index'] ?? 0,
        'name': topicData['name'] ?? '',
        'image': topicData['image'] ?? '',
        'length': topicData['length'] ?? 0,
        'percent': topicData['percent'] ?? 0,
      });
      topicCount++;

      // L∆∞u t·ª´ v·ª±ng
      final words = topicData['words'] as Map<String, dynamic>;
      for (var wordEntry in words.entries) {
        final word = wordEntry.value as Map<String, dynamic>;
        await LocalDatabaseService.insertWord({
          'topic': topicKey,
          'name': word['name'] ?? '',
          'phonetic': word['phonetic'] ?? '',
          'translate': word['translate'] ?? '',
          'isLearned': 0,
        });
        wordCount++;
      }
    }
    
    print('‚úÖ ƒê√£ load xong: $topicCount ch·ªß ƒë·ªÅ, $wordCount t·ª´ v·ª±ng');
  }

  /// Reset to√†n b·ªô database v√† load l·∫°i d·ªØ li·ªáu
  static Future<void> resetAndReload() async {
    print('üîÑ ƒêang reset database...');
    await LocalDatabaseService.clearAll();
    await loadVocabularyFromJson();
    print('‚úÖ Database ƒë√£ ƒë∆∞·ª£c reset v√† load l·∫°i!');
  }
}